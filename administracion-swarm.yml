# Son cuatro servicios para manejar docker: portainer + mariadb + phpmyadmin + nginx-proxy-manager
# Hay que tener cuidado con varios aspectos muy importantes:
# 1) la declaracion de IP es manual para poder conectarse desde otros servicios, para agregar un nuevo servicio se debe declarar la IP y configurar la lan como "external: true".
# 2) Los puertos no se declaran ya que se manejan con NPM (Nginx-Proxy-Manager).
# 3) A todos los dock se les tiene que poner un nombre para poder referirlos en NPM.
# docker stack deploy --compose-file=administracion-swarm.yml administracion

services:
  # Creamos el dock de portainer con una red propia para que se utilice con npm
  # https://docs.portainer.io/start/install-ce/server/swarm/linux -> Comunity Edition
  # https://docs.portainer.io/start/install/server/swarm/linux -> Business Edition
  # https://docker-ip:9443/
  # Este es el agente que debe correr en todos los nodos
  agent:
    image: portainer/agent:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    # No le doy un nombre al dock por que se debe crear en todos los nodos y crearia conflictos tener el mismo nombre en todos
    networks:
      - lan_docker
    # Esta es la configuracion para que corra en todos los nodos
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]
# FIN agente portainer

  portainer:
    image: portainer/portainer-ce:latest
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    # Configuracion de puertos, no se declara puertos ya que no hace falta por la configuracion de la red y NPM
    # ports:
      # - "9000:9000"
      # - "9443:9443"
      # - "8000:8000"
    # Configuracion de discos
    # Es muy importante que los directorios existan para que el stack funcione
    volumes:
      - portainer-data:/data
    # Configuramos la red
    # Le doy un nombre al host para referirlo en NPM
    hostname: portainer
    networks:
      - lan_docker
    # Con esta configuracion solo se va a replicar 1 vez en cualquier nodo manager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
# FIN portainer

  # Ahora creamos el servidor mariadb para que se conecten las aplicaciones, declaramos una coneccion para npm que funciona en conjunto con este compose, ademas le agrego phpmyadmin para poder manejar las BD de forma facil.
  # https://mariadb.com/
  mariadb:
    image: mariadb:latest
    # Utilizo un archivo externo para confiurar usuario root y una base para npm con su usuario
    env_file:
      - mariadb.env
    # Configuramos el password de root y del usuario npm para conectarse a la DB
    # environment:
      # MYSQL_ROOT_PASSWORD: CambiaMe
      # MYSQL_DATABASE: npm
      # MYSQL_USER: npm
      # MYSQL_PASSWORD: npm
    # Configuracion de puertos, no se declara puertos ya que no hace falta por la configuracion de la red y NPM
    # ports:
      # - '3306:3306'
    # Configuracion de discos
    # Es muy importante que los directorios existan para que el stack funcione
    volumes:
      - mariadb-data:/var/lib/mysql
    # Configuramos una IP estatica para el dock en la red portainer
    # Le doy un nombre al host para referirlo en NPM
    hostname: mariadb
    networks:
      - lan_docker
    # Con esta configuracion solo se va a replicar 1 vez en cualquier nodo manager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
# FIN mariadb

  # phpmyadmin para manejar la DB
  # https://www.phpmyadmin.net/
    # Le doy un nombre al dock
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    # Comfiguramos el nombre del servidor de BD, no configuro usuario y password por razones de seguridad
    environment:
      PMA_HOST: mariadb
    # Configuracion de puertos, no se declara puertos ya que no hace falta por la configuracion de la red y NPM
    # ports:
      # - '8100:80'
    depends_on:
      - mariadb
    # Configuramos una IP estatica para el dock
    # Le doy un nombre al host para referirlo en NPM
    hostname: phpmyadmin
    networks:
      - lan_docker
    # Con esta configuracion solo se va a replicar 1 vez en cualquier nodo manager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
# FIN phpmyadmin

  # Creamos nginx-proxy-manager para vincular la red con portainer y mariadb
  # https://nginxproxymanager.com/setup/
  # https://github.com/NginxProxyManager/nginx-proxy-manager
  # https://cursosdedesarrollo.com/2022/01/nginx-proxy-manager-o-la-manera-sencilla-de-manejar-acceso-a-tus-servicios-docker/
  # Credenciales por defecto
  # Email: admin@example.com
  # Password: changeme
  npm:
    image: 'jc21/nginx-proxy-manager:latest'
    # Estos son los unicos puertos a declara para que funcione todo con el proxy NPM
    ports:
      - '80:80'
      - '443:443'
      # - '81:81' # Se lo habilita la primera vez para administrar NPM
    # Utilizo un archivo externo para confiurar usuario root y una base para npm con su usuario
    env_file:
      - npm.env
    # environment:
      # Coneccion a la base de datos
      # Esta configuracion es para conectarse a la DB creada anteriormente
      # DB_MYSQL_HOST: "mariadb"
      # DB_MYSQL_PORT: 3306
      # DB_MYSQL_USER: "npm"
      # DB_MYSQL_PASSWORD: "npm"
      # DB_MYSQL_NAME: "npm"
      # Uncomment this if IPv6 is not enabled on your host
      # DISABLE_IPV6: 'true'
    # Configuracion de discos
    # Es muy importante que los directorios existan para que el stack funcione
    volumes:
      - npm-data:/data
      - letsencrypt:/etc/letsencrypt
    depends_on:
      - mariadb
    # Configuramos una IP estatica para el dock
    # Le doy un nombre al host para referirlo en NPM
    hostname: npm
    networks:
      - lan_docker
    # Con esta configuracion solo se va a replicar 1 vez en cualquier nodo manager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
# FIN npm

  # Este es un explorador de archivos donde podemos ver editar , subir, etc archivos desde el servidor. Muy util para evitar utilizar ssh o ftp
  # https://filebrowser.org/installation
  # Usuario y Password: admin
  file-browser:
    image: filebrowser/filebrowser
    # Configuracion de puertos, no lo declara puertos ya que uso la configuracion de la red y NPM
    # ports:
      # - "8080:80"
    # Le activo la terminal
    tty: true
    # Configuracion de discos, con esto le vamos a indicar en que directorio estan los archivos de configuracion de nuestro stack
    volumes:
      - /mnt/docker-data:/srv
    # Le doy un nombre al host para referirlo con NPM
    hostname: file-browser
    networks:
      - lan_docker
    # Con esta configuracion solo se va a replicar 1 vez en cualquier nodo manager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
# FIN file-browser

# Declaramos la red que vamos a utilizar
networks:
  # Configuracion de la red lan_docker
  lan_docker:
    driver: overlay
    attachable: true

# Como hago uso de los volumenes para persistencia de datos en esta seccion se declaran los directorios, es muy importante que los directorios existan para que el stack funcione
# Utilizo la variable $HOME para referirme al directorio home del usuario, si los datos se guardan en otro directorio se debe poner la ruta completa.
volumes:
  # Volumen ara guardar los datos de Portainer
  portainer-data:
    driver: local
    driver_opts:
      type: none
      # Esta es la ruta donde van a quedar los datos persistentes
      device: /mnt/docker-data/portainer-data
      o: bind
    name: portainer-data
  # Volumen ara guardar los datos de mariadb
  mariadb-data:
    driver: local
    driver_opts:
      type: none
      # Esta es la ruta donde van a quedar los datos persistentes
      device: /mnt/docker-data/mariadb-data
      o: bind
    name: mariadb-data
  # Volumen ara guardar los datos de nginx-proxy-manager
  npm-data:
    driver: local
    driver_opts:
      type: none
      # Esta es la ruta donde van a quedar los datos persistentes
      device: /mnt/docker-data/npm-data
      o: bind
    name: npm-data
  letsencrypt:
    driver: local
    driver_opts:
      type: none
      # Esta es la ruta donde van a quedar los datos persistentes
      device: /mnt/docker-data/letsencrypt
      o: bind
    name: letsencrypt
