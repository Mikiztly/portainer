# Son cinco servicios para manejar docker: portainer + mariadb + phpmyadmin + nginx-proxy-manager + file-browser
# Hay que tener cuidado con varios aspectos muy importantes:
# 1) Se declara un red para poder redireccionar por nombre de contenedor con nginx-proxy-manager, para agregar un nuevo servicio se debe declarar la red y configurarla como "external: true".
# 2) Los puertos no se declaran ya que se manejan con NPM (Nginx-Proxy-Manager).
# 3) A todos los dock se les tiene que poner un nombre para poder referirlos en NPM.
# 4) Se declaran los volumenes para redireccionar los datos a otro directorio/disco para tener persistencia de datos.
# se puede ejecutar con docker compose --file administracion.yml up -d

# Le doy un nombre descriptivo para identificar el stack
name: administracion

services:
  # Creamos el dock de portainer con una red propia para que se utilice con npm
  # https://docs.portainer.io/start/install-ce/server/swarm/linux -> Comunity Edition
  # https://docs.portainer.io/start/install/server/swarm/linux -> Business Edition
  # https://docker-ip:9443/
  portainer:
    # Le doy un nombre al dock
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: always
    # Configuracion de puertos, no se declara puertos ya que no hace falta por la configuracion de la red y NPM. Los dejo para referencia
    # ports:
      # - "9000:9000"
      # - "9443:9443"
      # - "8000:8000"
    # Como hago uso de los volumenes para persistencia de datos aca se declaran los directorios, es muy importante que los directorios existan para que el stack funcione. Utilizo la variable ${PATH_DATA} definida en el archivo .env para referirme al directorio.
    # Es muy importante que los directorios existan para que el stack funcione
    volumes:
      - ${PATH_DATA}/portainer-data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    # Configuramos una red
    # Le doy un nombre al host para referirlo en NPM
    hostname: portainer
    networks:
      lan_docker:
        # Si queremos darle una IP cambiamos la siguiente linea
        # ipv4_address: 192.168.200.254
  # FIN portainer

  # Ahora creamos el servidor mariadb para que se conecten las aplicaciones, declaramos una coneccion para npm que funciona en conjunto con este compose, ademas le agrego phpmyadmin para poder manejar las BD de forma facil.
  # https://mariadb.com/
  mariadb:
    # Le doy un nombre al dock
    container_name: mariadb
    image: mariadb:latest
    restart: always
    # Configuramos el password de root y del usuario npm para conectarse a la DB, aca utilizo los secretos para pasar la contraseña
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MYSQL_DATABASE: npm
      MYSQL_USER: npm
      MYSQL_PASSWORD_FILE: /run/secrets/db_npm_password
    # Configuracion de puertos, no se declara puertos ya que no hace falta por la configuracion de la red y NPM
    # ports:
      # - '3306:3306'
    # Declaramos los archivos que usamos para las contraseñas
    secrets:
      - db_root_password
      - db_npm_password
    # Como hago uso de los volumenes para persistencia de datos aca se declaran los directorios, es muy importante que los directorios existan para que el stack funcione. Utilizo la variable ${PATH_DATA} definida en el archivo.env para referirme al directorio.
    # Es muy importante que los directorios existan para que el stack funcione
    volumes:
      - ${PATH_DATA}/mariadb-data:/var/lib/mysql
    # Configuramos una red para el dock en la red portainer
    # Le doy un nombre al host para referirlo en NPM
    hostname: mariadb
    networks:
      lan_docker:
        # Si queremos darle una IP cambiamos la siguiente linea
        # ipv4_address: 192.168.200.253
  # FIN mariadb

  # phpmyadmin para manejar la DB
  # https://www.phpmyadmin.net/
    # Le doy un nombre al dock
  phpmyadmin:
    # Le doy un nombre al dock
    container_name: phpmyadmin
    image: phpmyadmin/phpmyadmin
    restart: always
    # Comfiguramos el nombre del servidor de BD, no configuro usuario y password por razones de seguridad
    environment:
      PMA_HOST: mariadb
    # Configuracion de puertos, no se declara puertos ya que no hace falta por la configuracion de la red y NPM
    # ports:
      # - '8100:80'
    depends_on:
      - mariadb
    # Configuramos una red para el dock
    # Le doy un nombre al host para referirlo en NPM
    hostname: phpmyadmin
    networks:
      lan_docker:
        # Si queremos darle una IP cambiamos la siguiente linea
        # ipv4_address: 192.168.200.252
  # FIN phpmyadmin

  # Creamos nginx-proxy-manager para vincular la red con portainer y mariadb
  # https://nginxproxymanager.com/setup/
  # https://github.com/NginxProxyManager/nginx-proxy-manager
  # https://cursosdedesarrollo.com/2022/01/nginx-proxy-manager-o-la-manera-sencilla-de-manejar-acceso-a-tus-servicios-docker/
  # Credenciales por defecto
  # Email: admin@example.com
  # Password: changeme
  npm:
    # Le doy un nombre al dock
    container_name: npm
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    # Estos son los unicos puertos a declara para que funcione todo con el proxy NPM
    ports:
      - '80:80'
      - '443:443'
      - '81:81' # Para administrar NPM por primera vez, despues se puede cerrar el puerto
    environment:
      # Coneccion a la base de datos
      # Esta configuracion es para conectarse a la DB creada anteriormente, tambien hago uso de los secretos para las contraseñas
      DB_MYSQL_HOST: "mariadb"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD__FILE: /run/secrets/db_npm_password
      DB_MYSQL_NAME: "npm"
      # Uncomment this if IPv6 is not enabled on your host
      DISABLE_IPV6: 'true'
    # Declaramos los archivos que usamos para las contraseñas
    secrets:
      - db_npm_password
    # Como hago uso de los volumenes para persistencia de datos aca se declaran los directorios, es muy importante que los directorios existan para que el stack funcione. Utilizo la variable ${PATH_DATA} definida en el archivo.env para referirme al directorio.
    # Es muy importante que los directorios existan para que el stack funcione
    volumes:
      - ${PATH_DATA}/npm-data:/data
      - ${PATH_DATA}/letsencrypt:/etc/letsencrypt
    depends_on:
      - mariadb
    # Configuramos una red para el dock
    # Le doy un nombre al host para referirlo en NPM
    hostname: npm
    networks:
      lan_docker:
        # Si queremos darle una IP cambiamos la siguiente linea
        # ipv4_address: 192.168.200.251
  # FIN npm

  # Este es un explorador de archivos donde podemos ver, subir, etc archivos desde el servidor. Muy util para evitar utilizar ssh o ftp
  # https://filebrowser.org/installation
  # Usuario y Password: admin
  file-browser:
    # Le doy un nombre al dock
    container_name: file-browser
    image: filebrowser/filebrowser
    # Configuracion de puertos, no lo declara puertos ya que uso la configuracion de la red y NPM
    # ports:
      # - "8080:80"
    restart: always
    # Le activo la terminal
    tty: true
    # Como hago uso de los volumenes para persistencia de datos aca se declaran los directorios, es muy importante que los directorios existan para que el stack funcione. Utilizo la variable ${PATH_DATA} definida en el archivo.env para referirme al directorio.
    volumes:
      - ${PATH_DATA}:/srv
    # Le doy un nombre al host para referirlo con NPM
    hostname: file-browser
    networks:
      lan_docker:
  # FIN file-browser

# Al utilizar los secretos para pasar las contraseñas indicamos el path al archivo
secrets:
  db_npm_password:
    file: db_npm_password.txt
  db_root_password:
    file: db_root_password.txt

# Declaramos la red que vamos a utilizar
networks:
  # Configuracion de la red lan_docker
  lan_docker:
    name: lan_docker
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.200.0/24
          gateway: 192.168.200.1

